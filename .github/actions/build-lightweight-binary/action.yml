name: 'Build C Library from Rust Project'
description: 'Builds a C Library from a Rust project using cbindgen and cargo. Panics are immediately aborted, and Cargo.toml must define `crate-type = ["cdylib", "staticlib"]`'

inputs:
  rust_project_path:
    description: 'Path to the Rust project'
    required: false
    default: '.'
  pgo_project_path:
    description: 'Path to the Rust project used for gathering PGO data. Can be same or separate project.'
    required: false
    default: '.'
  crate_name:
    description: 'Name of the Rust crate (used to determine file name)'
    required: true
  target:
    description: 'The target platform for the Rust compiler'
    required: true
  features:
    description: 'Comma-separated list of features to include in the build'
    required: false
    default: ''
  use_pgo:
    description: 'Use Profile-Guided Optimization [PGO] to build the library.'
    required: false
    default: false
  pgo_benchmark_name:
    description: 'Benchmark name to use with PGO.'
    required: false
    default: 'my_benchmark'
  use_cross:
    description: 'Use cross-rs for building. If false, use cargo.'
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: Install Nightly Rust
      uses: dtolnay/rust-toolchain@nightly

    # Cache Dependencies for Build Speed
    - name: Set environment variable
      shell: bash
      run: |
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install gcc-multilib (if on Ubuntu based System, and Not Using Creoss)
      if: inputs.use_cross == 'false' && runner.os == 'Linux'
      run: |
        sudo apt-get update || true
        sudo apt-get install -y gcc-multilib || true
      shell: bash


    - name: Setup Rust Toolchain
      shell: bash
      working-directory: ${{ inputs.rust_project_path }}
      run: |
        rustup target add ${{ inputs.target }}
        rustup component add rust-src --toolchain nightly
        rustup toolchain install nightly-${{ inputs.target }} --force-non-host

        # Install cross-rs if needed
        if [ "${{ inputs.use_cross }}" == "true" ]; then
          cargo install cross --git https://github.com/cross-rs/cross
        fi

    - name: Build Rust Project (with PGO)
      if: inputs.use_pgo == 'true'
      shell: bash
      working-directory: ${{ inputs.pgo_project_path }}
      run: |
        rustup component add llvm-tools-preview
        PGO_FEATURES_ARGS="${{ inputs.features }}"
        if [ -n "$PGO_FEATURES_ARGS" ]; then
          PGO_FEATURES_ARGS="$FEATURES_ARGS,pgo"
        else
          PGO_FEATURES_ARGS="pgo"
        fi
        
        # Generate PGO profiling data
        RUSTFLAGS="-Cprofile-generate=${GITHUB_WORKSPACE}/${{ inputs.rust_project_path }}/target/pgo-profiles" cargo +nightly test --bench ${{ inputs.pgo_benchmark_name }} --release --target ${{ inputs.target }} --features $PGO_FEATURES_ARGS

        # Merge the PGO profiles
        # This is tricky, llvm-profdata isn't in $PATH, so we need to find it ourselves.
        target_libdir=$(rustc --print target-libdir)
        bin_dir=$(dirname "$target_libdir")/bin
        llvm_profdata_path=$(find "$bin_dir" -name "llvm-profdata*" | head -n 1)

        $llvm_profdata_path merge -o "${{ inputs.rust_project_path }}/target/pgo-profiles/merged.profdata" "${{ inputs.rust_project_path }}/target/pgo-profiles"

        # Get sanitized path to pgo-profiles
        if [[ "${{ inputs.rust_project_path }}" == "." ]]; then
          sanitized_path="${GITHUB_WORKSPACE}"
        else
          sanitized_path="${GITHUB_WORKSPACE}/${{ inputs.rust_project_path }}"
        fi

        # Ensure the path does not end with a slash
        sanitized_path="${sanitized_path%/}"

        # Use the generated PGO profiling data to perform an optimized build
        RUSTFLAGS="-C panic=abort -Zlocation-detail=none -C lto=fat -C llvm-args=-pgo-warn-missing-function -C profile-use=${sanitized_path}/target/pgo-profiles/merged.profdata"

        BUILD_CMD="cargo"
        if [ "${{ inputs.use_cross }}" == "true" ]; then
          BUILD_CMD="cross"
        fi

        BUILD_FEATURES_ARGS="${{ inputs.features }}"
        if [ -n "$BUILD_FEATURES_ARGS" ]; then
          BUILD_FEATURES_ARGS="--features $BUILD_FEATURES_ARGS"
        else
          BUILD_FEATURES_ARGS=""
        fi

        cd "${GITHUB_WORKSPACE}/${{ inputs.rust_project_path }}"
        $BUILD_CMD +nightly rustc --release -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort --target ${{ inputs.target }} $BUILD_FEATURES_ARGS

        echo "PWD: $(pwd)"
        echo "Build Dir: "
        ls "${GITHUB_WORKSPACE}/${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release"

    - name: Build Rust project (without PGO)
      if: inputs.use_pgo != 'true'
      shell: bash
      working-directory: ${{ inputs.rust_project_path }}
      run: |
        RUSTFLAGS="-C panic=abort -Zlocation-detail=none -C lto=fat"
        FEATURES_ARGS="${{ inputs.features }}"
        if [ -n "$FEATURES_ARGS" ]; then
          FEATURES_ARGS="--features $FEATURES_ARGS"
        fi

        BUILD_CMD="cargo"
        if [ "${{ inputs.use_cross }}" == "true" ]; then
          BUILD_CMD="cross"
        fi

        $BUILD_CMD +nightly rustc --release -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort --target ${{ inputs.target }} $FEATURES_ARGS

        echo "PWD: $(pwd)"
        echo "Build Dir: "
        ls "${GITHUB_WORKSPACE}/${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.crate_name }}-${{ inputs.target }}-${{ inputs.features }}
        path: |
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/${{ inputs.crate_name }}*