name: 'Build C Library from Rust Project'
description: 'Builds a C Library from a Rust project using cbindgen and cargo. Panics are immediately aborted, and Cargo.toml must define `crate-type = ["cdylib", "staticlib"]`'

inputs:
  rust_project_path:
    description: 'Path to the Rust project'
    required: false
    default: '.'
  target:
    description: 'The target platform for the Rust compiler'
    required: true
  features:
    description: 'Comma-separated list of features to include in the build'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install Nightly Rust
      uses: dtolnay/rust-toolchain@nightly

    # Cache Dependencies for Build Speed
    - name: Set environment variable
      shell: bash
      run: |
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: Build Rust project
      shell: bash
      working-directory: ${{ inputs.rust_project_path }}
      run: |
        rustup component add rust-src --toolchain nightly
        rustup toolchain install nightly-${{ inputs.target }}
        cargo install cross --git https://github.com/cross-rs/cross

        RUSTFLAGS="-C panic=abort -Zlocation-detail=none -C lto=fat"
        FEATURES_ARGS="${{ inputs.features }}"
        if [ -n "$FEATURES_ARGS" ]; then
          FEATURES_ARGS="--features $FEATURES_ARGS"
        fi
        cross +nightly rustc --release -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort --target ${{ inputs.target }} --crate-type cdylib --crate-type staticlib $FEATURES_ARGS

    - name: Upload artifacts on Linux
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: C-Library-${{ inputs.target }}-${{ inputs.features }}
        path: |
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.a
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.so

    - name: Upload artifacts on Windows
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: C-Library-${{ inputs.target }}-${{ inputs.features }}
        path: |
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.lib
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.dll
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.pdb

    - name: Upload artifacts on macOS
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v3
      with:
        name: C-Library-${{ inputs.target }}-${{ inputs.features }}
        path: |
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.a
          ${{ inputs.rust_project_path }}/target/${{ inputs.target }}/release/*.dylib
