name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-native:
    {% raw -%}
    runs-on: ${{ matrix.os }}
    {%- endraw %}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
{%- if xplat %}
          - macos-latest
          - windows-latest
{%- endif %}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - id: test-rust
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/test-and-coverage@v1 # upgrade if needed

{%- if wine %}

  test-on-wine:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - id: test-rust
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/test-in-wine@v1 # upgrade if needed
{%- endif %}

{%- if build_c_libs %}

  build_c_libs:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_pgo: {% if build_c_libs-with-pgo %}true{%- else %}false{% endif %}
            use_cross: false
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use_pgo: {% if build_c_libs-with-pgo %}true{%- else %}false{% endif %}
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_pgo: false # no native runner
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_pgo: false # no native runner
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_pgo: {% if build_c_libs-with-pgo %}true{%- else %}false{% endif %}
            use_cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            use_pgo: {% if build_c_libs-with-pgo %}true{%- else %}false{% endif %}
            use_cross: false
          - os: windows-latest # no native runner
            target: aarch64-pc-windows-msvc
            use_pgo: {% if build_c_libs-with-pgo %}false{%- else %}false{% endif %}
            use_cross: false # msvc cross links
          - os: macos-13 # x86
            target: x86_64-apple-darwin
            use_pgo: {% if build_c_libs-with-pgo %}false{%- else %}false{% endif %}
            use_cross: false
          - os: macos-14 # M1 runner
            target: aarch64-apple-darwin
            use_pgo: {% if build_c_libs-with-pgo %}true{%- else %}false{% endif %}
            use_cross: false

    {% raw -%}
    runs-on: ${{ matrix.os }}
    {%- endraw %}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - id: build-libs
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/build-c-library@v1 # upgrade if needed
        with:
          {% raw -%}
          target: ${{ matrix.target }}
          use_pgo: ${{ matrix.use_pgo }}
          use_cross: ${{ matrix.use_cross }}
          features: "c-exports"
          {%- endraw %}
  
  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/generate-bindings@v1
        with:
          config_file: cbindgen_cpp.toml
          header_file: bindings_cpp.hpp
  
      - name: Generate C bindings
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/generate-bindings@v1
        with:
          config_file: cbindgen_c.toml
          header_file: bindings_c.h
{%- endif %}
{% if build_csharp_libs %}
  build-dotnet-library:
    needs: build_c_libs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and Package .NET Library
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/build-dotnet-library@dotnet-bindings
        with:
          targets: 'x86_64-unknown-linux-gnu,i686-unknown-linux-gnu,aarch64-unknown-linux-gnu,armv7-unknown-linux-gnueabihf,x86_64-pc-windows-msvc,i686-pc-windows-msvc,aarch64-pc-windows-msvc,x86_64-apple-darwin,aarch64-apple-darwin'
{%- endif %}
  publish-crate:
    permissions:
      contents: write

    needs: [test-native{%- if build_c_libs %},build_c_libs,build-c-headers{%- endif %}{%- if wine %},test-on-wine{%- endif %} ]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/') 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ↙️ Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compress Artifacts
        shell: bash
        run: |
          dir="artifacts"
          if [ ! -d "$dir" ]; then
            echo "Directory $dir does not exist. No artifacts found."
            exit 0
          fi

          for subdir in "$dir"/*; do
            if [ -d "$subdir" ]; then
              base=$(basename "$subdir")
              zip -r "$dir/$base.zip" "$subdir"
              rm -r "$subdir"
            fi
          done
          ls -A ./artifacts

      - name: GitHub Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*

{% if publish_crate_on_tag %}
      - name: Publish to crates.io
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/publish-crate@v1
        with:
          {% raw -%}
          token: ${{ secrets.CRATES_IO_TOKEN }}{%- endraw %}
{%- endif %}
{% if build_csharp_libs %}
      - name: Upload to NuGet
        shell: pwsh
        run: |
          $items = Get-ChildItem -Path "**.nupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing $item"
              dotnet nuget push "$item" -k "{% raw -%}${{ secrets.NUGET_KEY }}{%- endraw %}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }

          $items = Get-ChildItem -Path "**.snupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing Symbol Package $item"
              dotnet nuget push "$item" -k "{% raw -%}${{ secrets.NUGET_KEY }}{%- endraw %}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }
{%- endif %}